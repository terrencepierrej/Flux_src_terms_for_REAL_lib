#include "./NRPy_basic_defines.h"
#include "./NRPy_function_prototypes.h"
/*
 * Adds source term and connection terms to Stilde, rho_star and tau_tilde
 */
void calculate_all_source_terms(const reconstructed_prims_struct *restrict reconstructed_prims, const metric_quantities_struct *restrict metric_quantities, const metric_quantities_derivatives_struct *restrict metric_quantities_derivatives, conservative_sources_struct *restrict conservative_sources) {

{
const double u4U3 = reconstructed_prims->u4U3;
const double u4U0 = reconstructed_prims->u4U0;
const double P = reconstructed_prims->P;
const double BU1 = reconstructed_prims->BU1;
const double u4U1 = reconstructed_prims->u4U1;
const double u4U2 = reconstructed_prims->u4U2;
const double rhob = reconstructed_prims->rhob;
const double h = reconstructed_prims->h;
const double BU0 = reconstructed_prims->BU0;
const double BU2 = reconstructed_prims->BU2;
const double alpha = metric_quantities->alpha;
const double trK = metric_quantities->trK;
const double cf = metric_quantities->cf;
const double vetU0 = metric_quantities->vetU0;
const double vetU1 = metric_quantities->vetU1;
const double vetU2 = metric_quantities->vetU2;
const double aDD00 = metric_quantities->aDD00;
const double aDD01 = metric_quantities->aDD01;
const double aDD02 = metric_quantities->aDD02;
const double aDD11 = metric_quantities->aDD11;
const double aDD12 = metric_quantities->aDD12;
const double aDD22 = metric_quantities->aDD22;
const double hDD00 = metric_quantities->hDD00;
const double hDD01 = metric_quantities->hDD01;
const double hDD02 = metric_quantities->hDD02;
const double hDD11 = metric_quantities->hDD11;
const double hDD12 = metric_quantities->hDD12;
const double hDD22 = metric_quantities->hDD22;
const double vetU_dD12 = metric_quantities_derivatives->vetU_dD12;
const double hDD_dD221 = metric_quantities_derivatives->hDD_dD221;
const double hDD_dD022 = metric_quantities_derivatives->hDD_dD022;
const double hDD_dD222 = metric_quantities_derivatives->hDD_dD222;
const double cf_dD2 = metric_quantities_derivatives->cf_dD2;
const double hDD_dD002 = metric_quantities_derivatives->hDD_dD002;
const double hDD_dD020 = metric_quantities_derivatives->hDD_dD020;
const double hDD_dD000 = metric_quantities_derivatives->hDD_dD000;
const double hDD_dD120 = metric_quantities_derivatives->hDD_dD120;
const double hDD_dD112 = metric_quantities_derivatives->hDD_dD112;
const double alpha_dD0 = metric_quantities_derivatives->alpha_dD0;
const double vetU_dD22 = metric_quantities_derivatives->vetU_dD22;
const double alpha_dD1 = metric_quantities_derivatives->alpha_dD1;
const double hDD_dD220 = metric_quantities_derivatives->hDD_dD220;
const double vetU_dD01 = metric_quantities_derivatives->vetU_dD01;
const double hDD_dD122 = metric_quantities_derivatives->hDD_dD122;
const double hDD_dD010 = metric_quantities_derivatives->hDD_dD010;
const double vetU_dD10 = metric_quantities_derivatives->vetU_dD10;
const double alpha_dD2 = metric_quantities_derivatives->alpha_dD2;
const double vetU_dD21 = metric_quantities_derivatives->vetU_dD21;
const double hDD_dD021 = metric_quantities_derivatives->hDD_dD021;
const double cf_dD1 = metric_quantities_derivatives->cf_dD1;
const double hDD_dD001 = metric_quantities_derivatives->hDD_dD001;
const double hDD_dD111 = metric_quantities_derivatives->hDD_dD111;
const double vetU_dD02 = metric_quantities_derivatives->vetU_dD02;
const double vetU_dD11 = metric_quantities_derivatives->vetU_dD11;
const double hDD_dD110 = metric_quantities_derivatives->hDD_dD110;
const double vetU_dD20 = metric_quantities_derivatives->vetU_dD20;
const double hDD_dD012 = metric_quantities_derivatives->hDD_dD012;
const double hDD_dD011 = metric_quantities_derivatives->hDD_dD011;
const double vetU_dD00 = metric_quantities_derivatives->vetU_dD00;
const double cf_dD0 = metric_quantities_derivatives->cf_dD0;
const double hDD_dD121 = metric_quantities_derivatives->hDD_dD121;
  const double tmp_0 = ((cf)*(cf));
  const double tmp_1 = (1.0/(tmp_0));
  const double tmp_2 = hDD00 + 1;
  const double tmp_3 = 2/((cf)*(cf)*(cf));
  const double tmp_4 = cf_dD0*tmp_3;
  const double tmp_5 = hDD_dD000*tmp_1 - tmp_2*tmp_4;
  const double tmp_9 = hDD11 + 1;
  const double tmp_13 = hDD22 + 1;
  const double tmp_17 = BU0*(hDD01*u4U2 + hDD02*u4U3 + tmp_2*u4U1 + u4U0*(hDD01*vetU1 + hDD02*vetU2 + tmp_2*vetU0)) + BU1*(hDD01*u4U1 + hDD12*u4U3 + tmp_9*u4U2 + u4U0*(hDD01*vetU0 + hDD12*vetU2 + tmp_9*vetU1)) + BU2*(hDD02*u4U1 + hDD12*u4U2 + tmp_13*u4U3 + u4U0*(hDD02*vetU0 + hDD12*vetU1 + tmp_13*vetU2));
  const double tmp_18 = BU0*tmp_0 + tmp_17*u4U1;
  const double tmp_21 = (1.0/((u4U0)*(u4U0)));
  const double tmp_22 = (1.0/((cf)*(cf)*(cf)*(cf)));
  const double tmp_24 = (1.0/((alpha)*(alpha)));
  const double tmp_25 = tmp_24/((sqrt4pi)*(sqrt4pi));
  const double tmp_26 = tmp_22*tmp_25;
  const double tmp_27 = tmp_21*tmp_26;
  const double tmp_28 = pow(cf, -6);
  const double tmp_30 = tmp_21*tmp_25;
  const double tmp_31 = ((tmp_18)*(tmp_18))*tmp_2*tmp_28*tmp_30;
  const double tmp_32 = BU1*tmp_0 + tmp_17*u4U2;
  const double tmp_35 = tmp_28*tmp_30*((tmp_32)*(tmp_32))*tmp_9;
  const double tmp_36 = BU2*tmp_0 + tmp_17*u4U3;
  const double tmp_39 = tmp_13*tmp_28*tmp_30*((tmp_36)*(tmp_36));
  const double tmp_40 = hDD01*tmp_1*vetU1 + hDD02*tmp_1*vetU2 + tmp_1*tmp_2*vetU0;
  const double tmp_41 = hDD01*tmp_1*vetU0 + hDD12*tmp_1*vetU2 + tmp_1*tmp_9*vetU1;
  const double tmp_42 = hDD02*tmp_1*vetU0 + hDD12*tmp_1*vetU1 + tmp_1*tmp_13*vetU2;
  const double tmp_43 = ((tmp_17)*(tmp_17))*tmp_26;
  const double tmp_44 = tmp_43*(-((alpha)*(alpha)) + tmp_40*vetU0 + tmp_41*vetU1 + tmp_42*vetU2);
  const double tmp_47 = tmp_18*tmp_30*tmp_32;
  const double tmp_48 = hDD02*tmp_18*tmp_28*tmp_30*tmp_36;
  const double tmp_50 = hDD12*tmp_28*tmp_30*tmp_32*tmp_36;
  const double tmp_51 = tmp_17*tmp_26/u4U0;
  const double tmp_52 = tmp_18*tmp_51;
  const double tmp_54 = tmp_32*tmp_51;
  const double tmp_56 = tmp_36*tmp_51;
  const double tmp_58 = h*rhob + 2*hDD01*tmp_28*tmp_47 + tmp_31 + tmp_35 + tmp_39 + 2*tmp_40*tmp_52 + 2*tmp_41*tmp_54 + 2*tmp_42*tmp_56 + tmp_44 + 2*tmp_48 + 2*tmp_50;
  const double tmp_63 = -((hDD01)*(hDD01))*tmp_13*tmp_28 + 2*hDD01*hDD02*hDD12*tmp_28 - ((hDD02)*(hDD02))*tmp_28*tmp_9 - ((hDD12)*(hDD12))*tmp_2*tmp_28 + tmp_13*tmp_2*tmp_28*tmp_9;
  const double tmp_64 = (1.0/(tmp_63));
  const double tmp_65 = P + hDD01*tmp_28*tmp_47 + (1.0/2.0)*tmp_31 + (1.0/2.0)*tmp_35 + (1.0/2.0)*tmp_39 + tmp_40*tmp_52 + tmp_41*tmp_54 + tmp_42*tmp_56 + (1.0/2.0)*tmp_44 + tmp_48 + tmp_50;
  const double tmp_66 = -((tmp_18)*(tmp_18))*tmp_27 + tmp_58*((u4U1)*(u4U1)) + tmp_65*(-tmp_24*((vetU0)*(vetU0)) + tmp_64*(-((hDD12)*(hDD12))*tmp_22 + tmp_13*tmp_22*tmp_9));
  const double tmp_67 = alpha*sqrt(tmp_63);
  const double tmp_68 = (1.0/2.0)*tmp_67;
  const double tmp_69 = tmp_66*tmp_68;
  const double tmp_70 = hDD_dD110*tmp_1 - tmp_4*tmp_9;
  const double tmp_72 = -tmp_27*((tmp_32)*(tmp_32)) + tmp_58*((u4U2)*(u4U2)) + tmp_65*(-tmp_24*((vetU1)*(vetU1)) + tmp_64*(-((hDD02)*(hDD02))*tmp_22 + tmp_13*tmp_2*tmp_22));
  const double tmp_73 = tmp_68*tmp_72;
  const double tmp_74 = hDD_dD220*tmp_1 - tmp_13*tmp_4;
  const double tmp_76 = -tmp_27*((tmp_36)*(tmp_36)) + tmp_58*((u4U3)*(u4U3)) + tmp_65*(-tmp_24*((vetU2)*(vetU2)) + tmp_64*(-((hDD01)*(hDD01))*tmp_22 + tmp_2*tmp_22*tmp_9));
  const double tmp_77 = tmp_68*tmp_76;
  const double tmp_78 = hDD01*tmp_1;
  const double tmp_79 = tmp_1*vetU_dD20;
  const double tmp_81 = -hDD01*tmp_4 + hDD_dD010*tmp_1;
  const double tmp_82 = -hDD02*tmp_4 + hDD_dD020*tmp_1;
  const double tmp_83 = hDD02*tmp_79 + tmp_1*tmp_2*vetU_dD00 + tmp_5*vetU0 + tmp_78*vetU_dD10 + tmp_81*vetU1 + tmp_82*vetU2;
  const double tmp_84 = tmp_24*tmp_65;
  const double tmp_86 = tmp_58*u4U1;
  const double tmp_88 = -tmp_52 + tmp_84*vetU0 + tmp_86*u4U0;
  const double tmp_89 = tmp_67*tmp_88;
  const double tmp_91 = -hDD12*tmp_4 + hDD_dD120*tmp_1;
  const double tmp_92 = hDD12*tmp_79 + tmp_1*tmp_9*vetU_dD10 + tmp_70*vetU1 + tmp_78*vetU_dD00 + tmp_81*vetU0 + tmp_91*vetU2;
  const double tmp_95 = tmp_58*u4U0*u4U2;
  const double tmp_96 = -tmp_54 + tmp_84*vetU1 + tmp_95;
  const double tmp_97 = tmp_67*tmp_96;
  const double tmp_98 = hDD02*tmp_1*vetU_dD00 + hDD12*tmp_1*vetU_dD10 + tmp_13*tmp_79 + tmp_74*vetU2 + tmp_82*vetU0 + tmp_91*vetU1;
  const double tmp_100 = tmp_58*u4U0*u4U3;
  const double tmp_101 = tmp_100 - tmp_56 + tmp_84*vetU2;
  const double tmp_102 = tmp_101*tmp_67;
  const double tmp_106 = -tmp_18*tmp_27*tmp_32 + tmp_65*(-tmp_24*vetU0*vetU1 + tmp_64*(-hDD01*tmp_13*tmp_22 + hDD02*hDD12*tmp_22)) + tmp_86*u4U2;
  const double tmp_107 = tmp_106*tmp_67;
  const double tmp_109 = -tmp_18*tmp_27*tmp_36 + tmp_65*(-tmp_24*vetU0*vetU2 + tmp_64*(hDD01*hDD12*tmp_22 - hDD02*tmp_22*tmp_9)) + tmp_86*u4U3;
  const double tmp_110 = tmp_109*tmp_67;
  const double tmp_111 = -tmp_27*tmp_32*tmp_36 + tmp_58*u4U2*u4U3 + tmp_65*(-tmp_24*vetU1*vetU2 + tmp_64*(hDD01*hDD02*tmp_22 - hDD12*tmp_2*tmp_22));
  const double tmp_112 = tmp_111*tmp_67;
  const double tmp_113 = 2*alpha;
  const double tmp_114 = -tmp_43 + tmp_58*((u4U0)*(u4U0)) - tmp_84;
  const double tmp_115 = tmp_114*tmp_68;
  const double tmp_116 = cf_dD1*tmp_3;
  const double tmp_117 = hDD_dD001*tmp_1 - tmp_116*tmp_2;
  const double tmp_118 = hDD_dD111*tmp_1 - tmp_116*tmp_9;
  const double tmp_119 = hDD_dD221*tmp_1 - tmp_116*tmp_13;
  const double tmp_120 = tmp_1*vetU_dD21;
  const double tmp_122 = -hDD01*tmp_116 + hDD_dD011*tmp_1;
  const double tmp_123 = -hDD02*tmp_116 + hDD_dD021*tmp_1;
  const double tmp_124 = hDD02*tmp_120 + tmp_1*tmp_2*vetU_dD01 + tmp_117*vetU0 + tmp_122*vetU1 + tmp_123*vetU2 + tmp_78*vetU_dD11;
  const double tmp_126 = -hDD12*tmp_116 + hDD_dD121*tmp_1;
  const double tmp_127 = hDD12*tmp_120 + tmp_1*tmp_9*vetU_dD11 + tmp_118*vetU1 + tmp_122*vetU0 + tmp_126*vetU2 + tmp_78*vetU_dD01;
  const double tmp_128 = hDD02*tmp_1*vetU_dD01 + hDD12*tmp_1*vetU_dD11 + tmp_119*vetU2 + tmp_120*tmp_13 + tmp_123*vetU0 + tmp_126*vetU1;
  const double tmp_129 = cf_dD2*tmp_3;
  const double tmp_130 = hDD_dD002*tmp_1 - tmp_129*tmp_2;
  const double tmp_131 = hDD_dD112*tmp_1 - tmp_129*tmp_9;
  const double tmp_132 = hDD_dD222*tmp_1 - tmp_129*tmp_13;
  const double tmp_133 = tmp_1*vetU_dD22;
  const double tmp_135 = -hDD01*tmp_129 + hDD_dD012*tmp_1;
  const double tmp_136 = -hDD02*tmp_129 + hDD_dD022*tmp_1;
  const double tmp_137 = hDD02*tmp_133 + tmp_1*tmp_2*vetU_dD02 + tmp_130*vetU0 + tmp_135*vetU1 + tmp_136*vetU2 + tmp_78*vetU_dD12;
  const double tmp_139 = -hDD12*tmp_129 + hDD_dD122*tmp_1;
  const double tmp_140 = hDD12*tmp_133 + tmp_1*tmp_9*vetU_dD12 + tmp_131*vetU1 + tmp_135*vetU0 + tmp_139*vetU2 + tmp_78*vetU_dD02;
  const double tmp_141 = hDD02*tmp_1*vetU_dD02 + hDD12*tmp_1*vetU_dD12 + tmp_13*tmp_133 + tmp_132*vetU2 + tmp_136*vetU0 + tmp_139*vetU1;
  const double tmp_142 = tmp_114*vetU0;
  const double tmp_145 = (1.0/3.0)*tmp_1*trK;
  const double tmp_146 = -2*tmp_52 + 2*tmp_84*vetU0 + 2*tmp_86*u4U0;
  const double tmp_147 = -2*tmp_54 + 2*tmp_84*vetU1 + 2*tmp_95;
  const double tmp_148 = 2*tmp_100 - 2*tmp_56 + 2*tmp_84*vetU2;
  const double tmp_149 = aDD01*tmp_1 + (1.0/3.0)*tmp_78*trK;
  const double tmp_150 = tmp_106 + tmp_142*vetU1;
  const double tmp_151 = aDD02*tmp_1 + hDD02*tmp_145;
  const double tmp_152 = tmp_109 + tmp_142*vetU2;
  const double tmp_153 = aDD12*tmp_1 + hDD12*tmp_145;
  const double tmp_154 = tmp_111 + tmp_114*vetU1*vetU2;
  conservative_sources->StildeD0_src = tmp_102*tmp_98 + tmp_107*tmp_81 + tmp_110*tmp_82 + tmp_112*tmp_91 + tmp_115*(-alpha_dD0*tmp_113 + tmp_40*vetU_dD00 + tmp_41*vetU_dD10 + tmp_42*vetU_dD20 + tmp_83*vetU0 + tmp_92*vetU1 + tmp_98*vetU2) + tmp_5*tmp_69 + tmp_70*tmp_73 + tmp_74*tmp_77 + tmp_83*tmp_89 + tmp_92*tmp_97;
  conservative_sources->StildeD1_src = tmp_102*tmp_128 + tmp_107*tmp_122 + tmp_110*tmp_123 + tmp_112*tmp_126 + tmp_115*(-alpha_dD1*tmp_113 + tmp_124*vetU0 + tmp_127*vetU1 + tmp_128*vetU2 + tmp_40*vetU_dD01 + tmp_41*vetU_dD11 + tmp_42*vetU_dD21) + tmp_117*tmp_69 + tmp_118*tmp_73 + tmp_119*tmp_77 + tmp_124*tmp_89 + tmp_127*tmp_97;
  conservative_sources->StildeD2_src = tmp_102*tmp_141 + tmp_107*tmp_135 + tmp_110*tmp_136 + tmp_112*tmp_139 + tmp_115*(-alpha_dD2*tmp_113 + tmp_137*vetU0 + tmp_140*vetU1 + tmp_141*vetU2 + tmp_40*vetU_dD02 + tmp_41*vetU_dD12 + tmp_42*vetU_dD22) + tmp_130*tmp_69 + tmp_131*tmp_73 + tmp_132*tmp_77 + tmp_137*tmp_89 + tmp_140*tmp_97;
  conservative_sources->tau_tilde_src = tmp_67*(alpha_dD0*(-tmp_142 - tmp_88) + alpha_dD1*(-tmp_114*vetU1 - tmp_96) + alpha_dD2*(-tmp_101 - tmp_114*vetU2) + tmp_149*(tmp_146*vetU1 + tmp_150) + tmp_149*(tmp_147*vetU0 + tmp_150) + tmp_151*(tmp_146*vetU2 + tmp_152) + tmp_151*(tmp_148*vetU0 + tmp_152) + tmp_153*(tmp_147*vetU2 + tmp_154) + tmp_153*(tmp_148*vetU1 + tmp_154) + (aDD00*tmp_1 + tmp_145*tmp_2)*(tmp_114*((vetU0)*(vetU0)) + tmp_146*vetU0 + tmp_66) + (aDD11*tmp_1 + tmp_145*tmp_9)*(tmp_114*((vetU1)*(vetU1)) + tmp_147*vetU1 + tmp_72) + (aDD22*tmp_1 + tmp_13*tmp_145)*(tmp_114*((vetU2)*(vetU2)) + tmp_148*vetU2 + tmp_76));
}
}
