/*
 * Compute the characteristic speeds in2th direction
 */
void calculate_characteristic_speed_2th_direction(const rhss_paramstruct *restrict rhss_params, const prims_struct *restrict reconstructed_prims, const metric_quantities_struct *restrict metric_face_quantities, conservative_fluxes_struct *restrict conservative_fluxes) {

{
const double u4_rU0 = reconstructed_prims->u4_rU0;
const double u4_rU1 = reconstructed_prims->u4_rU1;
const double u4_rU2 = reconstructed_prims->u4_rU2;
const double u4_rU3 = reconstructed_prims->u4_rU3;
const double u4_lU0 = reconstructed_prims->u4_lU0;
const double u4_lU1 = reconstructed_prims->u4_lU1;
const double u4_lU2 = reconstructed_prims->u4_lU2;
const double u4_lU3 = reconstructed_prims->u4_lU3;
const double B_rU0 = reconstructed_prims->B_rU0;
const double B_rU1 = reconstructed_prims->B_rU1;
const double B_rU2 = reconstructed_prims->B_rU2;
const double B_lU0 = reconstructed_prims->B_lU0;
const double B_lU1 = reconstructed_prims->B_lU1;
const double B_lU2 = reconstructed_prims->B_lU2;
const double P_r = reconstructed_prims->P_r;
const double P_l = reconstructed_prims->P_l;
const double h_r = reconstructed_prims->h_r;
const double h_l = reconstructed_prims->h_l;
const double rhob_r = reconstructed_prims->rhob_r;
const double rhob_l = reconstructed_prims->rhob_l;
const double Gamma_th_r = reconstructed_prims->Gamma_th_r;
const double Gamma_th_l = reconstructed_prims->Gamma_th_l;
const double epsilon_th_r = reconstructed_prims->epsilon_th_r;
const double epsilon_th_l = reconstructed_prims->epsilon_th_l;
const double dPcold_drhob_r = reconstructed_prims->dPcold_drhob_r;
const double dPcold_drhob_l = reconstructed_prims->dPcold_drhob_l;
const double GAMMA_SPEED_LIMIT = rhss_params->GAMMA_SPEED_LIMIT;
const double TINYDOUBLE = rhss_params->TINYDOUBLE;
const double sqrt4pi = rhss_params->sqrt4pi;
const double alpha_face = metric_face_quantities->alpha_face;
const double cf_face = metric_face_quantities->cf_face;
const double vet_faceU0 = metric_face_quantities->vet_faceU0;
const double vet_faceU1 = metric_face_quantities->vet_faceU1;
const double vet_faceU2 = metric_face_quantities->vet_faceU2;
const double h_faceDD00 = metric_face_quantities->h_faceDD00;
const double h_faceDD01 = metric_face_quantities->h_faceDD01;
const double h_faceDD02 = metric_face_quantities->h_faceDD02;
const double h_faceDD01 = metric_face_quantities->h_faceDD01;
const double h_faceDD11 = metric_face_quantities->h_faceDD11;
const double h_faceDD12 = metric_face_quantities->h_faceDD12;
const double h_faceDD02 = metric_face_quantities->h_faceDD02;
const double h_faceDD12 = metric_face_quantities->h_faceDD12;
const double h_faceDD22 = metric_face_quantities->h_faceDD22;
  const double tmp_1 = (1.0/((alpha_face)*(alpha_face)));
  const double tmp_2 = ((cf_face)*(cf_face));
  const double tmp_3 = h_faceDD00 + 1;
  const double tmp_7 = h_faceDD01*vet_faceU1 + h_faceDD02*vet_faceU2 + tmp_3*vet_faceU0;
  const double tmp_8 = h_faceDD11 + 1;
  const double tmp_12 = h_faceDD01*vet_faceU0 + h_faceDD12*vet_faceU2 + tmp_8*vet_faceU1;
  const double tmp_13 = h_faceDD22 + 1;
  const double tmp_17 = h_faceDD02*vet_faceU0 + h_faceDD12*vet_faceU1 + tmp_13*vet_faceU2;
  const double tmp_18 = B_lU0*(h_faceDD01*u4_lU2 + h_faceDD02*u4_lU3 + tmp_3*u4_lU1 + tmp_7*u4_lU0) + B_lU1*(h_faceDD01*u4_lU1 + h_faceDD12*u4_lU3 + tmp_12*u4_lU0 + tmp_8*u4_lU2) + B_lU2*(h_faceDD02*u4_lU1 + h_faceDD12*u4_lU2 + tmp_13*u4_lU3 + tmp_17*u4_lU0);
  const double tmp_19 = B_lU0*tmp_2 + tmp_18*u4_lU1;
  const double tmp_20 = pow(cf_face, -6);
  const double tmp_21 = tmp_20*tmp_3;
  const double tmp_23 = tmp_1/((sqrt4pi)*(sqrt4pi));
  const double tmp_24 = tmp_23/((u4_lU0)*(u4_lU0));
  const double tmp_25 = B_lU1*tmp_2 + tmp_18*u4_lU2;
  const double tmp_26 = tmp_20*tmp_8;
  const double tmp_27 = B_lU2*tmp_2 + tmp_18*u4_lU3;
  const double tmp_28 = tmp_13*tmp_20;
  const double tmp_29 = (1.0/(tmp_2));
  const double tmp_30 = h_faceDD01*tmp_29*vet_faceU1 + h_faceDD02*tmp_29*vet_faceU2 + tmp_29*tmp_3*vet_faceU0;
  const double tmp_31 = h_faceDD01*tmp_29*vet_faceU0 + h_faceDD12*tmp_29*vet_faceU2 + tmp_29*tmp_8*vet_faceU1;
  const double tmp_32 = h_faceDD02*tmp_29*vet_faceU0 + h_faceDD12*tmp_29*vet_faceU1 + tmp_13*tmp_29*vet_faceU2;
  const double tmp_33 = (1.0/((cf_face)*(cf_face)*(cf_face)*(cf_face)));
  const double tmp_34 = tmp_23*tmp_33;
  const double tmp_35 = tmp_34*(-((alpha_face)*(alpha_face)) + tmp_30*vet_faceU0 + tmp_31*vet_faceU1 + tmp_32*vet_faceU2);
  const double tmp_36 = 2*h_faceDD01*tmp_20;
  const double tmp_39 = 2*tmp_20*tmp_27;
  const double tmp_40 = tmp_18/u4_lU0;
  const double tmp_41 = 2*tmp_34;
  const double tmp_44 = h_faceDD02*tmp_19*tmp_24*tmp_39 + h_faceDD12*tmp_24*tmp_25*tmp_39 + ((tmp_18)*(tmp_18))*tmp_35 + ((tmp_19)*(tmp_19))*tmp_21*tmp_24 + tmp_19*tmp_24*tmp_25*tmp_36 + tmp_19*tmp_30*tmp_40*tmp_41 + tmp_24*((tmp_25)*(tmp_25))*tmp_26 + tmp_24*((tmp_27)*(tmp_27))*tmp_28 + tmp_25*tmp_31*tmp_40*tmp_41 + 2*tmp_27*tmp_32*tmp_34*tmp_40;
  const double tmp_45 = tmp_44/(h_l*rhob_l + tmp_44);
  const double tmp_47 = -(tmp_45 - 1)*((Gamma_th_l*epsilon_th_l*(Gamma_th_l - 1) + dPcold_drhob_l)*(Gamma_th_l*epsilon_th_l*(Gamma_th_l - 1) + dPcold_drhob_l))/((h_l)*(h_l));
  const double tmp_49 = tmp_1*(tmp_45 + tmp_47);
  const double tmp_50 = -tmp_45 - tmp_47 + 1;
  const double tmp_51 = tmp_50*((u4_lU0)*(u4_lU0));
  const double tmp_52 = (1.0/(tmp_49 + tmp_51));
  const double tmp_53 = -tmp_1*vet_faceU1*(2*tmp_45 + 2*tmp_47) + 2*tmp_50*u4_lU0*u4_lU2;
  const double tmp_54 = (1.0/2.0)*tmp_52*tmp_53;
  const double tmp_57 = -tmp_1*((vet_faceU1)*(vet_faceU1)) + (-((h_faceDD02)*(h_faceDD02))*tmp_33 + tmp_13*tmp_3*tmp_33)/(-((h_faceDD01)*(h_faceDD01))*tmp_28 + 2*h_faceDD01*h_faceDD02*h_faceDD12*tmp_20 - ((h_faceDD02)*(h_faceDD02))*tmp_26 - ((h_faceDD12)*(h_faceDD12))*tmp_21 + tmp_13*tmp_20*tmp_3*tmp_8);
  const double tmp_58 = (4*tmp_49 + 4*tmp_51)*(tmp_50*((u4_lU2)*(u4_lU2)) - tmp_57*(tmp_45 + tmp_47));
  const double tmp_59 = sqrt((1.0/2.0)*((tmp_53)*(tmp_53)) - 1.0/2.0*tmp_58 + (1.0/2.0)*fabs(((tmp_53)*(tmp_53)) - tmp_58));
  const double tmp_60 = tmp_52*tmp_59;
  const double tmp_61 = (1.0/2.0)*tmp_60;
  const double tmp_63 = tmp_54 - tmp_61;
  const double tmp_64 = (1.0/(TINYDOUBLE + tmp_60));
  const double tmp_65 = (1.0/2.0)*fabs(tmp_60);
  const double tmp_66 = tmp_61 + tmp_65;
  const double tmp_68 = tmp_63*tmp_64*tmp_66;
  const double tmp_69 = B_rU0*(h_faceDD01*u4_rU2 + h_faceDD02*u4_rU3 + tmp_3*u4_rU1 + tmp_7*u4_rU0) + B_rU1*(h_faceDD01*u4_rU1 + h_faceDD12*u4_rU3 + tmp_12*u4_rU0 + tmp_8*u4_rU2) + B_rU2*(h_faceDD02*u4_rU1 + h_faceDD12*u4_rU2 + tmp_13*u4_rU3 + tmp_17*u4_rU0);
  const double tmp_70 = B_rU0*tmp_2 + tmp_69*u4_rU1;
  const double tmp_72 = tmp_23/((u4_rU0)*(u4_rU0));
  const double tmp_73 = B_rU1*tmp_2 + tmp_69*u4_rU2;
  const double tmp_74 = B_rU2*tmp_2 + tmp_69*u4_rU3;
  const double tmp_76 = 2*tmp_20*tmp_74;
  const double tmp_77 = tmp_69/u4_rU0;
  const double tmp_78 = h_faceDD02*tmp_70*tmp_72*tmp_76 + h_faceDD12*tmp_72*tmp_73*tmp_76 + tmp_21*((tmp_70)*(tmp_70))*tmp_72 + tmp_26*tmp_72*((tmp_73)*(tmp_73)) + tmp_28*tmp_72*((tmp_74)*(tmp_74)) + tmp_30*tmp_41*tmp_70*tmp_77 + tmp_31*tmp_41*tmp_73*tmp_77 + tmp_32*tmp_41*tmp_74*tmp_77 + tmp_35*((tmp_69)*(tmp_69)) + tmp_36*tmp_70*tmp_72*tmp_73;
  const double tmp_79 = tmp_78/(h_r*rhob_r + tmp_78);
  const double tmp_81 = -(tmp_79 - 1)*((Gamma_th_r*epsilon_th_r*(Gamma_th_r - 1) + dPcold_drhob_r)*(Gamma_th_r*epsilon_th_r*(Gamma_th_r - 1) + dPcold_drhob_r))/((h_r)*(h_r));
  const double tmp_83 = tmp_1*(tmp_79 + tmp_81);
  const double tmp_84 = -tmp_79 - tmp_81 + 1;
  const double tmp_85 = tmp_84*((u4_rU0)*(u4_rU0));
  const double tmp_86 = (1.0/(tmp_83 + tmp_85));
  const double tmp_87 = -tmp_1*vet_faceU1*(2*tmp_79 + 2*tmp_81) + 2*tmp_84*u4_rU0*u4_rU2;
  const double tmp_88 = (1.0/2.0)*tmp_86*tmp_87;
  const double tmp_90 = (4*tmp_83 + 4*tmp_85)*(-tmp_57*(tmp_79 + tmp_81) + tmp_84*((u4_rU2)*(u4_rU2)));
  const double tmp_91 = sqrt((1.0/2.0)*((tmp_87)*(tmp_87)) - 1.0/2.0*tmp_90 + (1.0/2.0)*fabs(((tmp_87)*(tmp_87)) - tmp_90));
  const double tmp_92 = tmp_86*tmp_91;
  const double tmp_93 = (1.0/2.0)*tmp_92;
  const double tmp_95 = tmp_88 - tmp_93;
  const double tmp_96 = (1.0/2.0)*fabs(tmp_92);
  const double tmp_97 = (tmp_93 + tmp_96)/(TINYDOUBLE + tmp_92);
  const double tmp_98 = tmp_95*tmp_97;
  const double tmp_99 = tmp_54 + tmp_61;
  const double tmp_100 = (1.0/(-TINYDOUBLE + tmp_52*tmp_59));
  const double tmp_101 = tmp_61 - tmp_65;
  const double tmp_103 = tmp_100*tmp_101*tmp_99;
  const double tmp_105 = (tmp_93 - tmp_96)/(-TINYDOUBLE + tmp_86*tmp_91);
  const double tmp_106 = tmp_105*(tmp_88 + tmp_93);
  const double tmp_107 = fabs(tmp_100*tmp_101*tmp_99 - tmp_106 + tmp_63*tmp_64*tmp_66 - tmp_98);
  const double tmp_108 = tmp_64*tmp_66*tmp_99;
  const double tmp_109 = tmp_97*(tmp_88 + tmp_93);
  const double tmp_110 = tmp_100*tmp_101*tmp_63;
  const double tmp_111 = tmp_105*tmp_95;
  const double tmp_112 = fabs(tmp_100*tmp_101*tmp_63 - tmp_109 - tmp_111 + tmp_64*tmp_66*tmp_99);
  conservative_fluxes->cmin_dirn2 = -1.0/4.0*tmp_103 - 1.0/4.0*tmp_106 + (1.0/4.0)*tmp_107 - 1.0/4.0*tmp_68 - 1.0/4.0*tmp_98 + (1.0/2.0)*fabs((1.0/2.0)*tmp_103 + (1.0/2.0)*tmp_106 - 1.0/2.0*tmp_107 + (1.0/2.0)*tmp_68 + (1.0/2.0)*tmp_98);
  conservative_fluxes->cmax_dirn2 = (1.0/4.0)*tmp_108 + (1.0/4.0)*tmp_109 + (1.0/4.0)*tmp_110 + (1.0/4.0)*tmp_111 + (1.0/4.0)*tmp_112 + (1.0/2.0)*fabs((1.0/2.0)*tmp_108 + (1.0/2.0)*tmp_109 + (1.0/2.0)*tmp_110 + (1.0/2.0)*tmp_111 + (1.0/2.0)*tmp_112);
}
}
