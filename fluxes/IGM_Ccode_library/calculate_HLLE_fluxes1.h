/*
 * Compute the HLLE-derived fluxes on the left face in the 1direction for all components.
 */
void calculate_HLLE_fluxes1(const rhss_paramstruct *restrict rhss_params, const prims_struct *restrict reconstructed_prims, const metric_quantities_struct *restrict metric_face_quantities, conservative_fluxes_struct *restrict conservative_fluxes) {

{
calculate_characteristic_speed_1th_direction(rhss_params, reconstructed_prims, metric_face_quantities, conservative_fluxes);

const double cmin_dirn1 = conservative_fluxes->cmin_dirn1;
const double cmax_dirn1 = conservative_fluxes->cmax_dirn1;
const double u4_rU0 = reconstructed_prims->u4_rU0;
const double u4_rU1 = reconstructed_prims->u4_rU1;
const double u4_rU2 = reconstructed_prims->u4_rU2;
const double u4_rU3 = reconstructed_prims->u4_rU3;
const double u4_lU0 = reconstructed_prims->u4_lU0;
const double u4_lU1 = reconstructed_prims->u4_lU1;
const double u4_lU2 = reconstructed_prims->u4_lU2;
const double u4_lU3 = reconstructed_prims->u4_lU3;
const double B_rU0 = reconstructed_prims->B_rU0;
const double B_rU1 = reconstructed_prims->B_rU1;
const double B_rU2 = reconstructed_prims->B_rU2;
const double B_lU0 = reconstructed_prims->B_lU0;
const double B_lU1 = reconstructed_prims->B_lU1;
const double B_lU2 = reconstructed_prims->B_lU2;
const double P_r = reconstructed_prims->P_r;
const double P_l = reconstructed_prims->P_l;
const double h_r = reconstructed_prims->h_r;
const double h_l = reconstructed_prims->h_l;
const double rhob_r = reconstructed_prims->rhob_r;
const double rhob_l = reconstructed_prims->rhob_l;
const double GAMMA_SPEED_LIMIT = rhss_params->GAMMA_SPEED_LIMIT;
const double TINYDOUBLE = rhss_params->TINYDOUBLE;
const double sqrt4pi = rhss_params->sqrt4pi;
const double alpha_face = metric_face_quantities->alpha_face;
const double cf_face = metric_face_quantities->cf_face;
const double vet_faceU0 = metric_face_quantities->vet_faceU0;
const double vet_faceU1 = metric_face_quantities->vet_faceU1;
const double vet_faceU2 = metric_face_quantities->vet_faceU2;
const double h_faceDD00 = metric_face_quantities->h_faceDD00;
const double h_faceDD01 = metric_face_quantities->h_faceDD01;
const double h_faceDD02 = metric_face_quantities->h_faceDD02;
const double h_faceDD01 = metric_face_quantities->h_faceDD01;
const double h_faceDD11 = metric_face_quantities->h_faceDD11;
const double h_faceDD12 = metric_face_quantities->h_faceDD12;
const double h_faceDD02 = metric_face_quantities->h_faceDD02;
const double h_faceDD12 = metric_face_quantities->h_faceDD12;
const double h_faceDD22 = metric_face_quantities->h_faceDD22;
  const double tmp_0 = (1.0/(cmax_dirn1 + cmin_dirn1));
  const double tmp_1 = (1.0/((cf_face)*(cf_face)*(cf_face)*(cf_face)));
  const double tmp_2 = ((alpha_face)*(alpha_face));
  const double tmp_3 = (1.0/(tmp_2));
  const double tmp_4 = tmp_3/((sqrt4pi)*(sqrt4pi));
  const double tmp_5 = tmp_1*tmp_4;
  const double tmp_7 = (1.0/((u4_lU0)*(u4_lU0)));
  const double tmp_8 = ((cf_face)*(cf_face));
  const double tmp_9 = h_faceDD00 + 1;
  const double tmp_13 = h_faceDD01*vet_faceU1 + h_faceDD02*vet_faceU2 + tmp_9*vet_faceU0;
  const double tmp_14 = h_faceDD11 + 1;
  const double tmp_18 = h_faceDD01*vet_faceU0 + h_faceDD12*vet_faceU2 + tmp_14*vet_faceU1;
  const double tmp_19 = h_faceDD22 + 1;
  const double tmp_23 = h_faceDD02*vet_faceU0 + h_faceDD12*vet_faceU1 + tmp_19*vet_faceU2;
  const double tmp_24 = B_lU0*(h_faceDD01*u4_lU2 + h_faceDD02*u4_lU3 + tmp_13*u4_lU0 + tmp_9*u4_lU1) + B_lU1*(h_faceDD01*u4_lU1 + h_faceDD12*u4_lU3 + tmp_14*u4_lU2 + tmp_18*u4_lU0) + B_lU2*(h_faceDD02*u4_lU1 + h_faceDD12*u4_lU2 + tmp_19*u4_lU3 + tmp_23*u4_lU0);
  const double tmp_25 = B_lU1*tmp_8 + tmp_24*u4_lU2;
  const double tmp_26 = ((tmp_25)*(tmp_25))*tmp_7;
  const double tmp_27 = B_lU0*tmp_8 + tmp_24*u4_lU1;
  const double tmp_28 = pow(cf_face, -6);
  const double tmp_29 = tmp_28*tmp_9;
  const double tmp_30 = tmp_4*tmp_7;
  const double tmp_31 = ((tmp_27)*(tmp_27))*tmp_29*tmp_30;
  const double tmp_33 = tmp_14*tmp_28*tmp_4;
  const double tmp_35 = B_lU2*tmp_8 + tmp_24*u4_lU3;
  const double tmp_36 = tmp_19*tmp_28;
  const double tmp_37 = tmp_30*((tmp_35)*(tmp_35))*tmp_36;
  const double tmp_38 = (1.0/(tmp_8));
  const double tmp_39 = h_faceDD01*tmp_38*vet_faceU1 + h_faceDD02*tmp_38*vet_faceU2 + tmp_38*tmp_9*vet_faceU0;
  const double tmp_40 = h_faceDD01*tmp_38*vet_faceU0 + h_faceDD12*tmp_38*vet_faceU2 + tmp_14*tmp_38*vet_faceU1;
  const double tmp_41 = h_faceDD02*tmp_38*vet_faceU0 + h_faceDD12*tmp_38*vet_faceU1 + tmp_19*tmp_38*vet_faceU2;
  const double tmp_42 = -tmp_2 + tmp_39*vet_faceU0 + tmp_40*vet_faceU1 + tmp_41*vet_faceU2;
  const double tmp_43 = ((tmp_24)*(tmp_24))*tmp_5;
  const double tmp_45 = h_faceDD01*tmp_28;
  const double tmp_48 = tmp_25*tmp_27*tmp_30;
  const double tmp_50 = h_faceDD02*tmp_27*tmp_28*tmp_30*tmp_35;
  const double tmp_51 = h_faceDD12*tmp_25*tmp_28*tmp_30*tmp_35;
  const double tmp_52 = tmp_24/u4_lU0;
  const double tmp_54 = tmp_27*tmp_5*tmp_52;
  const double tmp_57 = tmp_25*tmp_5*tmp_52;
  const double tmp_59 = tmp_35*tmp_5*tmp_52;
  const double tmp_61 = h_l*rhob_l + tmp_26*tmp_33 + tmp_31 + tmp_37 + 2*tmp_39*tmp_54 + 2*tmp_40*tmp_57 + 2*tmp_41*tmp_59 + tmp_42*tmp_43 + 2*tmp_45*tmp_48 + 2*tmp_50 + 2*tmp_51;
  const double tmp_63 = -((h_faceDD01)*(h_faceDD01))*tmp_36 + 2*h_faceDD01*h_faceDD02*h_faceDD12*tmp_28 - ((h_faceDD02)*(h_faceDD02))*tmp_14*tmp_28 - ((h_faceDD12)*(h_faceDD12))*tmp_29 + tmp_14*tmp_19*tmp_28*tmp_9;
  const double tmp_64 = (1.0/(tmp_63));
  const double tmp_65 = -tmp_3*((vet_faceU1)*(vet_faceU1)) + tmp_64*(-((h_faceDD02)*(h_faceDD02))*tmp_1 + tmp_1*tmp_19*tmp_9);
  const double tmp_66 = P_l + (1.0/2.0)*tmp_26*tmp_33 + (1.0/2.0)*tmp_31 + (1.0/2.0)*tmp_37 + tmp_39*tmp_54 + tmp_40*tmp_57 + tmp_41*tmp_59 + (1.0/2.0)*tmp_42*tmp_43 + tmp_45*tmp_48 + tmp_50 + tmp_51;
  const double tmp_67 = -tmp_26*tmp_5 + tmp_61*((u4_lU2)*(u4_lU2)) + tmp_65*tmp_66;
  const double tmp_68 = h_faceDD01*tmp_38;
  const double tmp_69 = tmp_3*tmp_66;
  const double tmp_70 = tmp_61*u4_lU0;
  const double tmp_71 = -tmp_57 + tmp_69*vet_faceU1 + tmp_70*u4_lU2;
  const double tmp_72 = tmp_25*tmp_5*tmp_7;
  const double tmp_75 = -tmp_3*vet_faceU1*vet_faceU2 + tmp_64*(h_faceDD01*h_faceDD02*tmp_1 - h_faceDD12*tmp_1*tmp_9);
  const double tmp_76 = -tmp_35*tmp_72 + tmp_61*u4_lU2*u4_lU3 + tmp_66*tmp_75;
  const double tmp_77 = h_faceDD02*tmp_38;
  const double tmp_78 = -tmp_3*vet_faceU0*vet_faceU1 + tmp_64*(-h_faceDD01*tmp_1*tmp_19 + h_faceDD02*h_faceDD12*tmp_1);
  const double tmp_79 = -tmp_27*tmp_72 + tmp_61*u4_lU1*u4_lU2 + tmp_66*tmp_78;
  const double tmp_80 = tmp_38*tmp_9;
  const double tmp_81 = sqrt(tmp_63);
  const double tmp_82 = alpha_face*tmp_81;
  const double tmp_83 = cmax_dirn1*tmp_82;
  const double tmp_85 = (1.0/((u4_rU0)*(u4_rU0)));
  const double tmp_86 = B_rU0*(h_faceDD01*u4_rU2 + h_faceDD02*u4_rU3 + tmp_13*u4_rU0 + tmp_9*u4_rU1) + B_rU1*(h_faceDD01*u4_rU1 + h_faceDD12*u4_rU3 + tmp_14*u4_rU2 + tmp_18*u4_rU0) + B_rU2*(h_faceDD02*u4_rU1 + h_faceDD12*u4_rU2 + tmp_19*u4_rU3 + tmp_23*u4_rU0);
  const double tmp_87 = B_rU1*tmp_8 + tmp_86*u4_rU2;
  const double tmp_88 = tmp_85*((tmp_87)*(tmp_87));
  const double tmp_89 = B_rU0*tmp_8 + tmp_86*u4_rU1;
  const double tmp_90 = tmp_4*tmp_85;
  const double tmp_91 = tmp_29*((tmp_89)*(tmp_89))*tmp_90;
  const double tmp_93 = B_rU2*tmp_8 + tmp_86*u4_rU3;
  const double tmp_94 = tmp_36*tmp_90*((tmp_93)*(tmp_93));
  const double tmp_95 = tmp_5*((tmp_86)*(tmp_86));
  const double tmp_98 = tmp_87*tmp_89*tmp_90;
  const double tmp_100 = h_faceDD02*tmp_28*tmp_89*tmp_90*tmp_93;
  const double tmp_101 = h_faceDD12*tmp_28*tmp_87*tmp_90*tmp_93;
  const double tmp_102 = tmp_86/u4_rU0;
  const double tmp_104 = tmp_102*tmp_5*tmp_89;
  const double tmp_107 = tmp_102*tmp_5*tmp_87;
  const double tmp_109 = tmp_102*tmp_5*tmp_93;
  const double tmp_111 = h_r*rhob_r + 2*tmp_100 + 2*tmp_101 + 2*tmp_104*tmp_39 + 2*tmp_107*tmp_40 + 2*tmp_109*tmp_41 + tmp_33*tmp_88 + tmp_42*tmp_95 + 2*tmp_45*tmp_98 + tmp_91 + tmp_94;
  const double tmp_112 = P_r + tmp_100 + tmp_101 + tmp_104*tmp_39 + tmp_107*tmp_40 + tmp_109*tmp_41 + (1.0/2.0)*tmp_33*tmp_88 + (1.0/2.0)*tmp_42*tmp_95 + tmp_45*tmp_98 + (1.0/2.0)*tmp_91 + (1.0/2.0)*tmp_94;
  const double tmp_113 = tmp_111*((u4_rU2)*(u4_rU2)) + tmp_112*tmp_65 - tmp_5*tmp_88;
  const double tmp_114 = tmp_112*tmp_3;
  const double tmp_115 = tmp_111*u4_rU0;
  const double tmp_116 = -tmp_107 + tmp_114*vet_faceU1 + tmp_115*u4_rU2;
  const double tmp_117 = tmp_5*tmp_85*tmp_87;
  const double tmp_119 = tmp_111*u4_rU2*u4_rU3 + tmp_112*tmp_75 - tmp_117*tmp_93;
  const double tmp_120 = tmp_111*u4_rU1*u4_rU2 + tmp_112*tmp_78 - tmp_117*tmp_89;
  const double tmp_121 = cmin_dirn1*tmp_82;
  const double tmp_122 = -tmp_43 + tmp_61*((u4_lU0)*(u4_lU0)) - tmp_69;
  const double tmp_123 = -tmp_59 + tmp_69*vet_faceU2 + tmp_70*u4_lU3;
  const double tmp_124 = -tmp_54 + tmp_69*vet_faceU0 + tmp_70*u4_lU1;
  const double tmp_125 = tmp_111*((u4_rU0)*(u4_rU0)) - tmp_114 - tmp_95;
  const double tmp_126 = -tmp_109 + tmp_114*vet_faceU2 + tmp_115*u4_rU3;
  const double tmp_127 = -tmp_104 + tmp_114*vet_faceU0 + tmp_115*u4_rU1;
  const double tmp_128 = cmax_dirn1*cmin_dirn1;
  const double tmp_129 = tmp_14*tmp_38;
  const double tmp_130 = h_faceDD12*tmp_38;
  const double tmp_131 = tmp_19*tmp_38;
  const double tmp_133 = rhob_l*tmp_82*u4_lU0;
  const double tmp_135 = rhob_r*tmp_82*u4_rU0;
  const double tmp_136 = tmp_2*tmp_81;
  conservative_fluxes->StildeD0_rhs = tmp_0*(tmp_121*(tmp_113*tmp_68 + tmp_116*tmp_39 + tmp_119*tmp_77 + tmp_120*tmp_80) - tmp_128*(alpha_face*tmp_81*(tmp_116*tmp_68 + tmp_125*tmp_39 + tmp_126*tmp_77 + tmp_127*tmp_80) - tmp_82*(tmp_122*tmp_39 + tmp_123*tmp_77 + tmp_124*tmp_80 + tmp_68*tmp_71)) + tmp_83*(tmp_39*tmp_71 + tmp_67*tmp_68 + tmp_76*tmp_77 + tmp_79*tmp_80));
  conservative_fluxes->StildeD1_rhs = tmp_0*(tmp_121*(tmp_113*tmp_129 + tmp_116*tmp_40 + tmp_119*tmp_130 + tmp_120*tmp_68) - tmp_128*(alpha_face*tmp_81*(tmp_116*tmp_129 + tmp_125*tmp_40 + tmp_126*tmp_130 + tmp_127*tmp_68) - tmp_82*(tmp_122*tmp_40 + tmp_123*tmp_130 + tmp_124*tmp_68 + tmp_129*tmp_71)) + tmp_83*(tmp_129*tmp_67 + tmp_130*tmp_76 + tmp_40*tmp_71 + tmp_68*tmp_79));
  conservative_fluxes->StildeD2_rhs = tmp_0*(tmp_121*(tmp_113*tmp_130 + tmp_116*tmp_41 + tmp_119*tmp_131 + tmp_120*tmp_77) - tmp_128*(alpha_face*tmp_81*(tmp_116*tmp_130 + tmp_125*tmp_41 + tmp_126*tmp_131 + tmp_127*tmp_77) - tmp_82*(tmp_122*tmp_41 + tmp_123*tmp_131 + tmp_124*tmp_77 + tmp_130*tmp_71)) + tmp_83*(tmp_130*tmp_67 + tmp_131*tmp_76 + tmp_41*tmp_71 + tmp_77*tmp_79));
  conservative_fluxes->rho_star_rhs = tmp_0*(rhob_l*tmp_83*u4_lU2 + rhob_r*tmp_121*u4_rU2 - tmp_128*(-tmp_133 + tmp_135));
  conservative_fluxes->tau_tilde_rhs = tmp_0*(cmax_dirn1*(-rhob_l*tmp_82*u4_lU2 + tmp_136*tmp_71) + cmin_dirn1*(-rhob_r*tmp_82*u4_rU2 + tmp_116*tmp_136) - tmp_128*(-tmp_122*tmp_136 + tmp_125*tmp_2*tmp_81 + tmp_133 - tmp_135));
}
}
