/*
 * Compute the HLLE-derived fluxes on the left face in the 2direction for all components.
 */
void calculate_HLLE_fluxes2(const rhss_paramstruct *restrict rhss_params, const prims_struct *restrict reconstructed_prims, const metric_quantities_struct *restrict metric_face_quantities, conservative_fluxes_struct *restrict conservative_fluxes) {

{
calculate_characteristic_speed_2th_direction(rhss_params, reconstructed_prims, metric_face_quantities, conservative_fluxes);

const double cmin_dirn2 = conservative_fluxes->cmin_dirn2;
const double cmax_dirn2 = conservative_fluxes->cmax_dirn2;
const double u4_rU0 = reconstructed_prims->u4_rU0;
const double u4_rU1 = reconstructed_prims->u4_rU1;
const double u4_rU2 = reconstructed_prims->u4_rU2;
const double u4_rU3 = reconstructed_prims->u4_rU3;
const double u4_lU0 = reconstructed_prims->u4_lU0;
const double u4_lU1 = reconstructed_prims->u4_lU1;
const double u4_lU2 = reconstructed_prims->u4_lU2;
const double u4_lU3 = reconstructed_prims->u4_lU3;
const double B_rU0 = reconstructed_prims->B_rU0;
const double B_rU1 = reconstructed_prims->B_rU1;
const double B_rU2 = reconstructed_prims->B_rU2;
const double B_lU0 = reconstructed_prims->B_lU0;
const double B_lU1 = reconstructed_prims->B_lU1;
const double B_lU2 = reconstructed_prims->B_lU2;
const double P_r = reconstructed_prims->P_r;
const double P_l = reconstructed_prims->P_l;
const double h_r = reconstructed_prims->h_r;
const double h_l = reconstructed_prims->h_l;
const double rhob_r = reconstructed_prims->rhob_r;
const double rhob_l = reconstructed_prims->rhob_l;
const double GAMMA_SPEED_LIMIT = rhss_params->GAMMA_SPEED_LIMIT;
const double TINYDOUBLE = rhss_params->TINYDOUBLE;
const double sqrt4pi = rhss_params->sqrt4pi;
const double alpha_face = metric_face_quantities->alpha_face;
const double cf_face = metric_face_quantities->cf_face;
const double vet_faceU0 = metric_face_quantities->vet_faceU0;
const double vet_faceU1 = metric_face_quantities->vet_faceU1;
const double vet_faceU2 = metric_face_quantities->vet_faceU2;
const double h_faceDD00 = metric_face_quantities->h_faceDD00;
const double h_faceDD01 = metric_face_quantities->h_faceDD01;
const double h_faceDD02 = metric_face_quantities->h_faceDD02;
const double h_faceDD01 = metric_face_quantities->h_faceDD01;
const double h_faceDD11 = metric_face_quantities->h_faceDD11;
const double h_faceDD12 = metric_face_quantities->h_faceDD12;
const double h_faceDD02 = metric_face_quantities->h_faceDD02;
const double h_faceDD12 = metric_face_quantities->h_faceDD12;
const double h_faceDD22 = metric_face_quantities->h_faceDD22;
  const double tmp_0 = (1.0/(cmax_dirn2 + cmin_dirn2));
  const double tmp_1 = (1.0/((cf_face)*(cf_face)*(cf_face)*(cf_face)));
  const double tmp_2 = ((alpha_face)*(alpha_face));
  const double tmp_3 = (1.0/(tmp_2));
  const double tmp_4 = tmp_3/((sqrt4pi)*(sqrt4pi));
  const double tmp_5 = tmp_1*tmp_4;
  const double tmp_7 = (1.0/((u4_lU0)*(u4_lU0)));
  const double tmp_8 = ((cf_face)*(cf_face));
  const double tmp_9 = h_faceDD00 + 1;
  const double tmp_13 = h_faceDD01*vet_faceU1 + h_faceDD02*vet_faceU2 + tmp_9*vet_faceU0;
  const double tmp_14 = h_faceDD11 + 1;
  const double tmp_18 = h_faceDD01*vet_faceU0 + h_faceDD12*vet_faceU2 + tmp_14*vet_faceU1;
  const double tmp_19 = h_faceDD22 + 1;
  const double tmp_23 = h_faceDD02*vet_faceU0 + h_faceDD12*vet_faceU1 + tmp_19*vet_faceU2;
  const double tmp_24 = B_lU0*(h_faceDD01*u4_lU2 + h_faceDD02*u4_lU3 + tmp_13*u4_lU0 + tmp_9*u4_lU1) + B_lU1*(h_faceDD01*u4_lU1 + h_faceDD12*u4_lU3 + tmp_14*u4_lU2 + tmp_18*u4_lU0) + B_lU2*(h_faceDD02*u4_lU1 + h_faceDD12*u4_lU2 + tmp_19*u4_lU3 + tmp_23*u4_lU0);
  const double tmp_25 = B_lU2*tmp_8 + tmp_24*u4_lU3;
  const double tmp_26 = ((tmp_25)*(tmp_25))*tmp_7;
  const double tmp_27 = B_lU0*tmp_8 + tmp_24*u4_lU1;
  const double tmp_28 = pow(cf_face, -6);
  const double tmp_29 = tmp_28*tmp_9;
  const double tmp_30 = tmp_4*tmp_7;
  const double tmp_31 = ((tmp_27)*(tmp_27))*tmp_29*tmp_30;
  const double tmp_32 = B_lU1*tmp_8 + tmp_24*u4_lU2;
  const double tmp_33 = tmp_14*tmp_28;
  const double tmp_34 = tmp_30*((tmp_32)*(tmp_32))*tmp_33;
  const double tmp_36 = tmp_19*tmp_28*tmp_4;
  const double tmp_38 = (1.0/(tmp_8));
  const double tmp_39 = h_faceDD01*tmp_38*vet_faceU1 + h_faceDD02*tmp_38*vet_faceU2 + tmp_38*tmp_9*vet_faceU0;
  const double tmp_40 = h_faceDD01*tmp_38*vet_faceU0 + h_faceDD12*tmp_38*vet_faceU2 + tmp_14*tmp_38*vet_faceU1;
  const double tmp_41 = h_faceDD02*tmp_38*vet_faceU0 + h_faceDD12*tmp_38*vet_faceU1 + tmp_19*tmp_38*vet_faceU2;
  const double tmp_42 = -tmp_2 + tmp_39*vet_faceU0 + tmp_40*vet_faceU1 + tmp_41*vet_faceU2;
  const double tmp_43 = ((tmp_24)*(tmp_24))*tmp_5;
  const double tmp_45 = h_faceDD01*tmp_28;
  const double tmp_48 = tmp_27*tmp_30*tmp_32;
  const double tmp_50 = h_faceDD02*tmp_25*tmp_27*tmp_28*tmp_30;
  const double tmp_51 = h_faceDD12*tmp_25*tmp_28*tmp_30*tmp_32;
  const double tmp_52 = tmp_24/u4_lU0;
  const double tmp_54 = tmp_27*tmp_5*tmp_52;
  const double tmp_57 = tmp_32*tmp_5*tmp_52;
  const double tmp_59 = tmp_25*tmp_5*tmp_52;
  const double tmp_61 = h_l*rhob_l + tmp_26*tmp_36 + tmp_31 + tmp_34 + 2*tmp_39*tmp_54 + 2*tmp_40*tmp_57 + 2*tmp_41*tmp_59 + tmp_42*tmp_43 + 2*tmp_45*tmp_48 + 2*tmp_50 + 2*tmp_51;
  const double tmp_63 = -((h_faceDD01)*(h_faceDD01))*tmp_19*tmp_28 + 2*h_faceDD01*h_faceDD02*h_faceDD12*tmp_28 - ((h_faceDD02)*(h_faceDD02))*tmp_33 - ((h_faceDD12)*(h_faceDD12))*tmp_29 + tmp_14*tmp_19*tmp_28*tmp_9;
  const double tmp_64 = (1.0/(tmp_63));
  const double tmp_65 = -tmp_3*((vet_faceU2)*(vet_faceU2)) + tmp_64*(-((h_faceDD01)*(h_faceDD01))*tmp_1 + tmp_1*tmp_14*tmp_9);
  const double tmp_66 = P_l + (1.0/2.0)*tmp_26*tmp_36 + (1.0/2.0)*tmp_31 + (1.0/2.0)*tmp_34 + tmp_39*tmp_54 + tmp_40*tmp_57 + tmp_41*tmp_59 + (1.0/2.0)*tmp_42*tmp_43 + tmp_45*tmp_48 + tmp_50 + tmp_51;
  const double tmp_67 = -tmp_26*tmp_5 + tmp_61*((u4_lU3)*(u4_lU3)) + tmp_65*tmp_66;
  const double tmp_68 = h_faceDD02*tmp_38;
  const double tmp_69 = tmp_3*tmp_66;
  const double tmp_70 = tmp_61*u4_lU0;
  const double tmp_71 = -tmp_59 + tmp_69*vet_faceU2 + tmp_70*u4_lU3;
  const double tmp_76 = -tmp_3*vet_faceU1*vet_faceU2 + tmp_64*(h_faceDD01*h_faceDD02*tmp_1 - h_faceDD12*tmp_1*tmp_9);
  const double tmp_77 = -tmp_25*tmp_32*tmp_5*tmp_7 + tmp_61*u4_lU2*u4_lU3 + tmp_66*tmp_76;
  const double tmp_78 = h_faceDD01*tmp_38;
  const double tmp_79 = -tmp_3*vet_faceU0*vet_faceU2 + tmp_64*(h_faceDD01*h_faceDD12*tmp_1 - h_faceDD02*tmp_1*tmp_14);
  const double tmp_80 = -tmp_25*tmp_27*tmp_5*tmp_7 + tmp_61*u4_lU1*u4_lU3 + tmp_66*tmp_79;
  const double tmp_81 = tmp_38*tmp_9;
  const double tmp_82 = sqrt(tmp_63);
  const double tmp_83 = alpha_face*tmp_82;
  const double tmp_84 = cmax_dirn2*tmp_83;
  const double tmp_86 = (1.0/((u4_rU0)*(u4_rU0)));
  const double tmp_87 = B_rU0*(h_faceDD01*u4_rU2 + h_faceDD02*u4_rU3 + tmp_13*u4_rU0 + tmp_9*u4_rU1) + B_rU1*(h_faceDD01*u4_rU1 + h_faceDD12*u4_rU3 + tmp_14*u4_rU2 + tmp_18*u4_rU0) + B_rU2*(h_faceDD02*u4_rU1 + h_faceDD12*u4_rU2 + tmp_19*u4_rU3 + tmp_23*u4_rU0);
  const double tmp_88 = B_rU2*tmp_8 + tmp_87*u4_rU3;
  const double tmp_89 = tmp_86*((tmp_88)*(tmp_88));
  const double tmp_90 = B_rU0*tmp_8 + tmp_87*u4_rU1;
  const double tmp_91 = tmp_4*tmp_86;
  const double tmp_92 = tmp_29*((tmp_90)*(tmp_90))*tmp_91;
  const double tmp_93 = B_rU1*tmp_8 + tmp_87*u4_rU2;
  const double tmp_94 = tmp_33*tmp_91*((tmp_93)*(tmp_93));
  const double tmp_96 = tmp_5*((tmp_87)*(tmp_87));
  const double tmp_99 = tmp_90*tmp_91*tmp_93;
  const double tmp_101 = h_faceDD02*tmp_28*tmp_88*tmp_90*tmp_91;
  const double tmp_102 = h_faceDD12*tmp_28*tmp_88*tmp_91*tmp_93;
  const double tmp_103 = tmp_87/u4_rU0;
  const double tmp_105 = tmp_103*tmp_5*tmp_90;
  const double tmp_108 = tmp_103*tmp_5*tmp_93;
  const double tmp_110 = tmp_103*tmp_5*tmp_88;
  const double tmp_112 = h_r*rhob_r + 2*tmp_101 + 2*tmp_102 + 2*tmp_105*tmp_39 + 2*tmp_108*tmp_40 + 2*tmp_110*tmp_41 + tmp_36*tmp_89 + tmp_42*tmp_96 + 2*tmp_45*tmp_99 + tmp_92 + tmp_94;
  const double tmp_113 = P_r + tmp_101 + tmp_102 + tmp_105*tmp_39 + tmp_108*tmp_40 + tmp_110*tmp_41 + (1.0/2.0)*tmp_36*tmp_89 + (1.0/2.0)*tmp_42*tmp_96 + tmp_45*tmp_99 + (1.0/2.0)*tmp_92 + (1.0/2.0)*tmp_94;
  const double tmp_114 = tmp_112*((u4_rU3)*(u4_rU3)) + tmp_113*tmp_65 - tmp_5*tmp_89;
  const double tmp_115 = tmp_113*tmp_3;
  const double tmp_116 = tmp_112*u4_rU0;
  const double tmp_117 = -tmp_110 + tmp_115*vet_faceU2 + tmp_116*u4_rU3;
  const double tmp_120 = tmp_112*u4_rU2*u4_rU3 + tmp_113*tmp_76 - tmp_5*tmp_86*tmp_88*tmp_93;
  const double tmp_121 = tmp_112*u4_rU1*u4_rU3 + tmp_113*tmp_79 - tmp_5*tmp_86*tmp_88*tmp_90;
  const double tmp_122 = cmin_dirn2*tmp_83;
  const double tmp_123 = -tmp_43 + tmp_61*((u4_lU0)*(u4_lU0)) - tmp_69;
  const double tmp_124 = -tmp_57 + tmp_69*vet_faceU1 + tmp_70*u4_lU2;
  const double tmp_125 = -tmp_54 + tmp_69*vet_faceU0 + tmp_70*u4_lU1;
  const double tmp_126 = tmp_112*((u4_rU0)*(u4_rU0)) - tmp_115 - tmp_96;
  const double tmp_127 = -tmp_108 + tmp_115*vet_faceU1 + tmp_116*u4_rU2;
  const double tmp_128 = -tmp_105 + tmp_115*vet_faceU0 + tmp_116*u4_rU1;
  const double tmp_129 = cmax_dirn2*cmin_dirn2;
  const double tmp_130 = h_faceDD12*tmp_38;
  const double tmp_131 = tmp_14*tmp_38;
  const double tmp_132 = tmp_19*tmp_38;
  const double tmp_134 = rhob_l*tmp_83*u4_lU0;
  const double tmp_136 = rhob_r*tmp_83*u4_rU0;
  const double tmp_137 = tmp_2*tmp_82;
  conservative_fluxes->StildeD0_rhs = tmp_0*(tmp_122*(tmp_114*tmp_68 + tmp_117*tmp_39 + tmp_120*tmp_78 + tmp_121*tmp_81) - tmp_129*(alpha_face*tmp_82*(tmp_117*tmp_68 + tmp_126*tmp_39 + tmp_127*tmp_78 + tmp_128*tmp_81) - tmp_83*(tmp_123*tmp_39 + tmp_124*tmp_78 + tmp_125*tmp_81 + tmp_68*tmp_71)) + tmp_84*(tmp_39*tmp_71 + tmp_67*tmp_68 + tmp_77*tmp_78 + tmp_80*tmp_81));
  conservative_fluxes->StildeD1_rhs = tmp_0*(tmp_122*(tmp_114*tmp_130 + tmp_117*tmp_40 + tmp_120*tmp_131 + tmp_121*tmp_78) - tmp_129*(alpha_face*tmp_82*(tmp_117*tmp_130 + tmp_126*tmp_40 + tmp_127*tmp_131 + tmp_128*tmp_78) - tmp_83*(tmp_123*tmp_40 + tmp_124*tmp_131 + tmp_125*tmp_78 + tmp_130*tmp_71)) + tmp_84*(tmp_130*tmp_67 + tmp_131*tmp_77 + tmp_40*tmp_71 + tmp_78*tmp_80));
  conservative_fluxes->StildeD2_rhs = tmp_0*(tmp_122*(tmp_114*tmp_132 + tmp_117*tmp_41 + tmp_120*tmp_130 + tmp_121*tmp_68) - tmp_129*(alpha_face*tmp_82*(tmp_117*tmp_132 + tmp_126*tmp_41 + tmp_127*tmp_130 + tmp_128*tmp_68) - tmp_83*(tmp_123*tmp_41 + tmp_124*tmp_130 + tmp_125*tmp_68 + tmp_132*tmp_71)) + tmp_84*(tmp_130*tmp_77 + tmp_132*tmp_67 + tmp_41*tmp_71 + tmp_68*tmp_80));
  conservative_fluxes->rho_star_rhs = tmp_0*(rhob_l*tmp_84*u4_lU3 + rhob_r*tmp_122*u4_rU3 - tmp_129*(-tmp_134 + tmp_136));
  conservative_fluxes->tau_tilde_rhs = tmp_0*(cmax_dirn2*(-rhob_l*tmp_83*u4_lU3 + tmp_137*tmp_71) + cmin_dirn2*(-rhob_r*tmp_83*u4_rU3 + tmp_117*tmp_137) - tmp_129*(-tmp_123*tmp_137 + tmp_126*tmp_2*tmp_82 + tmp_134 - tmp_136));
}
}
