.---------.
| NRPyEOS |
.---------.
(c) 2022 Leo Werneck

.-------------------.
| Basic description |
.-------------------.
This code is a standalone adaptation of the original interpolators for
tabulated equations of state (EOS) by Christian Ott. It has been ported
from the Einstein Toolkit by extracting the relevant source code from
the EOS_Omni thorn. We provide, however, interpolation routines which
are more efficient in the sense that we only interpolate the quantities
which are actually necessary. Furthermore, we have removed all global
variables from the original source code, added a new struct to contain
all table and auxiliary variables, and converted the code to C.

.------------------------.
| Usage within a project |
.------------------------.
To have access to the interpolating routines and datatypes introduced by
NRPyEOS, one should include the NRPyEOS.h file to their C code. All
NRPyEOS functions and datatypes begin with "NRPyEOS_" and function names
are long and descriptive on purpose. We provide a minimal example of
usage in the file NRPyEOS_minimal.c.

.------------------------------------------.
| Adding additional interpolation routines |
.------------------------------------------.
The prototypes for the two core interpolation routines used by NRPyEOS
are the following:

void NRPyEOS_from_rho_Ye_T_interpolate_n_quantities( const NRPyEOS_params *restrict eos_params,
                                                     const int n,
                                                     const double rho,
                                                     const double Ye,
                                                     const double T,
                                                     const int *restrict tablevars_keys,
                                                     double *restrict tablevars,
                                                     NRPyEOS_error_report *restrict report );

void NRPyEOS_from_rho_Ye_aux_find_T_and_interpolate_n_quantities( const NRPyEOS_params *restrict eos_params,
                                                                  const int n,
                                                                  const double prec,
                                                                  const double rho,
                                                                  const double Ye,
                                                                  const double tablevar_in,
                                                                  const int  tablevar_in_key,
                                                                  const int *restrict tablevars_keys,
                                                                  double *restrict tablevars,
                                                                  double *restrict T,
                                                                  NRPyEOS_error_report *restrict report );

One can feel free to simply use these directly, but we provide the
option of generating convenient wrapper functions that will take care of
calling these lower level functions appropriately. By default we have
set up interpolation routines which have proven useful for us, but the
user can easily extend the set of routines generated by NRPyEOS by
adding additional calls to Cfunc_known_T() and/or Cfunc_uknown_T() in
the add_all_Cfuncs_to_dict() function call.

For example, if one has access to the density (rho), the electron
fraction (Y_e), and the temperature (T), and one needs to compute the
hydrodynamic quantities (following our notation and conventions):

- P    - Pressure
- eps  - Specific internal energy
- S    - Entropy
- mu_e - Electron chemical potential
- mu_p - Proton chemical potential
- mu_n - Neutron chemical potential
- X_n  - Neutron mass fraction
- X_p  - Proton mass fraction

then one need only add the following line to the
add_all_Cfuncs_to_dict() function call:

Cfunc_known_T([P,eps,S,mu_e,mu_p,mu_n,X_n,X_p])

and the file NRPyEOS_P_eps_S_mue_mup_mun_Xn_and_Xp_from_rho_Ye_T.c will
be created, containing a function with the following prototype:

void NRPyEOS_P_eps_S_mue_mup_mun_Xn_and_Xp_from_rho_Ye_T(const NRPyEOS_params *restrict eos_params,
                                                         const double rho,
                                                         const double Ye,
                                                         const double T,
                                                         double *restrict P,
                                                         double *restrict eps,
                                                         double *restrict S,
                                                         double *restrict mu_e,
                                                         double *restrict mu_p,
                                                         double *restrict mu_n,
                                                         double *restrict X_n,
                                                         double *restrict X_p);

.-------------------.
| Useful references |
.-------------------.
Original source code  : https://bitbucket.org/zelmani/eosdrivercxx/src/master/
EOS_Omni documentation: https://einsteintoolkit.org/thornguide/EinsteinEOS/EOS_Omni/documentation.html
NRPyEOS documentation : Tutorial-Tabulated_Equation_of_State_Ccode_Library.ipynb (mybinder link will be added later)
